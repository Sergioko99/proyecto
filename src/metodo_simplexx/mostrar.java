/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
 /**
  @ Author: Sergio Sanchez Sanchez
  @ Author: Branadon Gerardo Rosales Almaraz
  @ Author: Luis Anatornio Lopez Reyes
  **/
package metodo_simplexx;

import java.text.DecimalFormat;
import javax.swing.table.DefaultTableModel;
import static metodo_simplexx.datos2.restr;
import static metodo_simplexx.datos2.var;

/**
 *
 * @author Sergio
 */
public class mostrar extends javax.swing.JFrame {

    /**
     * Creates new form mostrar
     */
    public mostrar() {
        initComponents();
         this.setLocationRelativeTo(null);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabla);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 567, 174));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/show_icon_184109.png"))); // NOI18N
        jButton1.setText("Show table");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 320, 40));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/-sort_90210.png"))); // NOI18N
        jButton2.setText("sort out");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 260, 320, 50));

        text.setColumns(20);
        text.setRows(5);
        jScrollPane5.setViewportView(text);

        getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, 570, 160));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/return_icon_154912.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(643, 0, 80, 50));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();
        int restrictions = Integer.parseInt(restr.getText());
        int variables = Integer.parseInt(var.getText());
        int columna1 = variables;
        for (int i = 0; i < variables; i++) {
            model.addColumn("x" + (i + 1));
        }
        variables = restrictions + variables;

        model.setRowCount(restrictions);
        model.setColumnCount(variables);
        for (int j = columna1; j < variables; j++) {
            tabla.setValueAt(0, 0, j);
        }
        int i1 = 1, j1 = columna1;
        for (int i = 1; i < restrictions; i++) {
            for (int j = columna1; j < variables - 1; j++) {
                if (i1 == i && j1 == j) {
                    tabla.setValueAt(1, i, j);
                } else {
                    tabla.setValueAt(0, i, j);
                }
            }
            j1++;
            i1++;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        text.append("SIMPLEX METHOD\n");
        DecimalFormat l = new DecimalFormat("0.000");
        int restrictions = Integer.parseInt(restr.getText());
        int variables = Integer.parseInt(var.getText());
        int col = variables;
        variables = restrictions + variables;
        double v[][] = new double[restrictions][variables];
        int y1 = 1;
        for (int i = 0; i < variables; i++) {
            if (i < col) {
                text.append("\t x" + (i + 1));
            } else if (i >= col && i < variables - 1) {
                text.append("\t d" + (y1));
                y1++;

            } else {
                text.append("\t resul");

            }
        }
        text.append("\n");
        for (int i = 0; i < restrictions; i++) {
            for (int j = 0; j < variables; j++) {
                v[i][j] = Double.parseDouble(tabla.getValueAt(i, j).toString());
            }
        }

        for (int i = 0; i < restrictions; i++) {
            if(i!=0){
                text.append("d"+i);
            }
            for (int j = 0; j < variables; j++) {
                text.append("\t " + l.format(v[i][j]));
            }
            text.append("\n");
        }
        text.append("\n\n");
        String v2[] = new String[restrictions];
        int v3[] = new int[restrictions];
        int v4[] = new int[restrictions];
        int co = 0;
        while (true) {
            if (co == col) {
                break;
            }

            int f = 0, c = 0;
            double negative = 0;
            for (int i = 0; i < col; i++) {
                if (v[0][i] < negative) {
                    negative = v[0][i];
                    c = i;
                }
            }
            text.append("THE MAXIMUM NEGATIVE IS\n");
            text.append(" " + negative + "\nthe column is \n");
            for (int i = 0; i < restrictions; i++) {
                text.append(" " + v[i][c] + "\n");
            }
            text.append("\n");
            text.append("\n dividing with the column\n");
            double menor = 0;
            double v1[] = new double[restrictions - 1];
            int h = 0;
            for (int i = 1; i < restrictions; i++) {
                v1[h] = v[i][variables - 1] / v[i][c];
                text.append(" " + v[i][variables - 1] + " / " + v[i][c] + " = " + v1[h] + " \n");
                h++;
            }
            menor = v1[0];
            for (int i = 0; i < restrictions - 1; i++) {
                if (v1[i] <= menor) {
                    menor = v1[i];
                    f = i + 1;
                }
            }
            text.append("the minor of the division is: " + menor + "\n");
            double pivo = v[f][c];
            text.append("the pivot is:" + pivo);

            text.append("\n process of converting the pivot to 1\n dividing the whole row with the pivot\n");
            for (int i = 0; i < variables; i++) {
                double va = v[f][i];
                v[f][i] = v[f][i] / pivo;
                text.append("" + va + " / " + pivo + " = " + v[f][i] + "\n");
            }
            for (int i = 1; i < restrictions; i++) {
                if (i == f) {
                    v2[i] = "x" + (c + 1);
                    v3[i] = c + 1;
                    v4[i] = i;
                }
                if (v3[i] <= 0) {

                    v2[i] = "d" + (i);
                }
            }

            text.append("\n process \n ");
            for (int i = 0; i < restrictions; i++) {
                if (i != f) {
                    text.append("Converting the pivot column to zero, in row" + (i + 1) + "\n\n");

                    double guar = 0;
                    guar = -v[i][c];
                    for (int j = 0; j < variables; j++) {
                        double vaa = v[i][j];
                        v[i][j] = guar * v[f][j] + v[i][j];
                        text.append(" " + guar + "*" + v[f][j] + " + " + vaa + " = " + v[i][j] + "\n");
                    }
                }
            }
            co = 0;
            for (int i = 0; i < col; i++) {
                if (v[0][i] >= 0) {
                    co++;
                }
            }
            y1=1;
            for (int i = 0; i < variables; i++) {
                if (i < col) {
                    text.append("\t x" + (i + 1));
                } else if (i >= col && i < variables - 1) {
                    text.append("\t d" + (y1));
                    y1++;

                } else {
                    text.append("\t resul");

                }
            }
            text.append("\n");
           
            for (int i = 0; i < restrictions; i++) {
           if(i!=0){
           text.append(v2[i]);
           }
                for (int j = 0; j < variables; j++) {
                    text.append("\t " + l.format(v[i][j]));
                }
                text.append("\n");
            }
            text.append("\n\n");

        }
        int y2 = 0;
        text.append("OUTCOME\n");
        text.append("z = "+v[0][variables-1]+"\n");
        for (int i = 1; i<restrictions; i++) {
            char m1[]=v2[i].toCharArray();
            if(m1[0]=='x'){
            text.append(" "+v2[i]+" = "+v[v4[i]][variables-1]+"\n");
            }
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       new datos2().setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mostrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mostrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mostrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mostrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mostrar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable tabla;
    private javax.swing.JTextArea text;
    // End of variables declaration//GEN-END:variables
}
